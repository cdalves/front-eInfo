import * as faceapi from 'face-api.js';
import React, { useEffect } from 'react';
import style from "./CamFace.module.css"
import Button from '../Forms/Button';
import { Link, json } from 'react-router-dom';


function CamFace() {
  const [resultados, setResultados] = React.useState(false);
  const [startCam, setStartCam] = React.useState(false);
  const [arrayTam, setArrayTam] = React.useState(null);
  const [time, setTime] = React.useState(0);
  const newdata = [0,0,0,0,0,0,0,0];

  const videoRef = React.useRef();
  const videoHeight = 480;
  const videoWidth = 640;
  const canvasRef = React.useRef(); 

  const loadLabels = () => {
    const FACES_URL = process.env.PUBLIC_URL + '/UserFaces';
    const labels = ['Daniel']
    return Promise.all(labels.map(async label => {
        const descriptions = []
        for (let i = 1; i <= 3; i++) {
            const img = await faceapi.fetchImage(`${FACES_URL}/${label}/${i}.jpeg`)
            const detections = await faceapi
                .detectSingleFace(img)
                .withFaceLandmarks()
                .withFaceDescriptor()
            descriptions.push(detections.descriptor);
        }
        console.log(descriptions);
        return new faceapi.LabeledFaceDescriptors(label, descriptions)
    }))
  }
 
  React.useEffect(() => {
    const loadModels = async () => {
    const MODEL_URL = process.env.PUBLIC_URL + '/models';
    
     await Promise.all([
        faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL),
        faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL),
        faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL),
        faceapi.nets.faceExpressionNet.loadFromUri(MODEL_URL),
        faceapi.nets.ssdMobilenetv1.loadFromUri(MODEL_URL),
      ]).then(startVideo);
    }
    loadModels();
  }, []);
  
  async function startVideo(){
   
    navigator.mediaDevices
      .getUserMedia({ video: { width: 600 } })
      .then(stream => {
        const video =  videoRef.current;
        video.srcObject = stream;
        video.play();
      })
      .catch(err => {
        closeWebcam();
        console.error("error:", err);
      });
  }

  async function handleVideoOnPlay(){
    setInterval(async () => {
      if (canvasRef && canvasRef.current) {
        canvasRef.current.innerHTML = faceapi.createCanvasFromMedia(videoRef.current);
        const displaySize = {
          width: videoWidth,
          height: videoHeight
        }

        faceapi.matchDimensions(canvasRef.current, displaySize);
        const labels = await loadLabels();

        
        const detections = await faceapi
        .detectAllFaces(videoRef.current, new faceapi.TinyFaceDetectorOptions())
          .withFaceLandmarks()
          .withFaceDescriptors();
        const resizedDetections = faceapi.resizeResults(detections, displaySize);
        const faceMatcher = new faceapi.FaceMatcher(labels, 0.6)
        const results = resizedDetections.map(d =>
            faceMatcher.findBestMatch(d.descriptor)
        )


          await canvasRef.current.getContext('2d').clearRect(0, 0, 600,600);
          faceapi.draw.drawDetections(canvasRef.current, resizedDetections);
          faceapi.draw.drawFaceLandmarks(canvasRef.current, resizedDetections);
          //faceapi.draw.drawFaceExpressions(canvasRef.current, resizedDetections);
          results.forEach((result, index) => {
            const box = resizedDetections[index].detection.box
            const { label, distance } = result
            new faceapi.draw.DrawTextField([
                `${label} (${parseInt(distance * 100, 10)})`
            ], box.bottomRight).draw(canvasRef)
          })
      }
    }, 1000)
  }

  
  
  const closeWebcam = () => {
    videoRef.current.pause();
    videoRef.current.srcObject.getTracks()[0].stop();
  }
  

  return (
    <div className={style.container}>
      <video ref={videoRef} height={videoHeight} width={videoWidth} onPlay={handleVideoOnPlay}/>
      <canvas ref={canvasRef} style={{ position: 'absolute', left: '0' }} />   

  </div>
  );
}

export default CamFace;